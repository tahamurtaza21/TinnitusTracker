package com.example.tinnitusaiish.util

import android.content.Context
import android.content.Intent
import android.graphics.Bitmap
import android.net.Uri
import android.os.Environment
import androidx.core.content.FileProvider
import com.example.tinnitusaiish.model.WeeklyReport
import com.example.tinnitusaiish.model.getStartDate
import com.itextpdf.io.image.ImageDataFactory
import com.itextpdf.io.source.ByteArrayOutputStream
import com.itextpdf.kernel.pdf.PdfDocument
import com.itextpdf.kernel.pdf.PdfWriter
import com.itextpdf.layout.Document
import com.itextpdf.layout.element.Image
import com.itextpdf.layout.element.Paragraph
import com.itextpdf.layout.properties.TextAlignment
import java.io.File
import java.io.FileOutputStream

fun openPdf(context: Context, file: File) {
    val uri: Uri = FileProvider.getUriForFile(
        context,
        "${context.packageName}.provider", // <- must match your manifest
        file
    )

    val intent = Intent(Intent.ACTION_VIEW).apply {
        setDataAndType(uri, "application/pdf")
        flags = Intent.FLAG_ACTIVITY_CLEAR_TOP or
                Intent.FLAG_ACTIVITY_NEW_TASK or
                Intent.FLAG_GRANT_READ_URI_PERMISSION
    }

    context.startActivity(intent)
}

fun generatePdf(
    context: Context,
    report: WeeklyReport,
    patientName: String,
    userNote: String,
    tinnitusGraph: Bitmap,
    anxietyGraph: Bitmap,
    reportRange: String // ðŸ‘ˆ new param
): File {
    val reportLabel = when (reportRange) {
        "weekly" -> "Weekly"
        "monthly" -> "Monthly"
        "since_signup" -> "Full History"
        else -> "Report"
    }

    val fileName = "Tinnitus_${reportLabel}_Report.pdf"
    val downloadsDir = context.getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS)
    val file = File(downloadsDir, fileName)

    val outputStream = FileOutputStream(file)
    val writer = PdfWriter(outputStream)
    val pdfDoc = PdfDocument(writer)
    val document = Document(pdfDoc)

    val startDate = getStartDate()
    val endDate = java.text.SimpleDateFormat("yyyy-MM-dd").format(java.util.Date())

    // Title
    val title = Paragraph("Tinnitus $reportLabel Report")
        .setFontSize(20f)
        .setBold()
        .setMarginBottom(10f)
    document.add(title)

    // Patient Name and Date Range
    document.add(Paragraph("Patient: $patientName").setFontSize(13f).setBold())
    document.add(
        Paragraph("Report Period: $startDate to $endDate")
            .setItalic()
            .setFontSize(12f)
            .setMarginBottom(15f)
    )

    // Section Helper
    fun addSection(label: String, value: String) {
        val labelText = Paragraph(label).setBold().setFontSize(13f)
        val valueText = Paragraph(value).setFontSize(12f).setMarginBottom(10f)
        document.add(labelText)
        document.add(valueText)
    }

    val totalDays = report.tinnitusLevels.size
    val relaxPercent =
        if (totalDays > 0) report.relaxationDays.toDouble() * 100 / totalDays else 0.0
    val soundPercent =
        if (totalDays > 0) report.soundTherapyDays.toDouble() * 100 / totalDays else 0.0

    val relaxStr =
        String.format("%.1f%% (%d/%d days)", relaxPercent, report.relaxationDays, totalDays)
    val soundStr =
        String.format("%.1f%% (%d/%d days)", soundPercent, report.soundTherapyDays, totalDays)

    addSection("Relaxation Exercises Done", relaxStr)
    addSection("Sound Therapy Used", soundStr)

    // Insert Graph Images
    val tinnitusStream = ByteArrayOutputStream()
    tinnitusGraph.compress(Bitmap.CompressFormat.PNG, 100, tinnitusStream)
    val tinnitusImage = Image(ImageDataFactory.create(tinnitusStream.toByteArray()))
    tinnitusImage.setAutoScale(true)
    document.add(Paragraph("Tinnitus Level Trend").setBold().setMarginTop(10f))
    document.add(tinnitusImage)

    val tinnitusAvg = String.format("%.2f", report.tinnitusLevels.filterNotNull().average())
    document.add(
        Paragraph("Average Tinnitus Level: $tinnitusAvg")
            .setFontSize(12f)
            .setMarginBottom(10f)
    )

    val anxietyStream = ByteArrayOutputStream()
    anxietyGraph.compress(Bitmap.CompressFormat.PNG, 100, anxietyStream)
    val anxietyImage = Image(ImageDataFactory.create(anxietyStream.toByteArray()))
    anxietyImage.setAutoScale(true)
    document.add(Paragraph("Anxiety Level Trend").setBold().setMarginTop(10f))
    document.add(anxietyImage)

    val anxietyAvg = String.format("%.2f", report.anxietyLevels.filterNotNull().average())
    document.add(
        Paragraph("Average Anxiety Level: $anxietyAvg")
            .setFontSize(12f)
            .setMarginBottom(10f)
    )

    // Notes
    document.add(Paragraph("\nAdditional Notes:").setBold())
    document.add(
        Paragraph(userNote)
            .setItalic()
            .setFontSize(11f)
            .setMarginBottom(20f)
    )

    // Footer
    val footer = Paragraph("Generated by Tinnitus App")
        .setFontSize(10f)
        .setItalic()
        .setMarginTop(30f)
        .setTextAlignment(TextAlignment.CENTER)

    document.add(footer)
    document.close()
    return file
}

fun sendPdfViaEmail(
    context: Context,
    file: File,
    toEmail: String,
    reportRange: String // ðŸ‘ˆ added
) {
    val label = when (reportRange) {
        "weekly" -> "Weekly"
        "monthly" -> "Monthly"
        "since_signup" -> "Full History"
        else -> "Report"
    }

    val uri = FileProvider.getUriForFile(
        context,
        "${context.packageName}.provider",
        file
    )

    val intent = Intent(Intent.ACTION_SEND).apply {
        type = "application/pdf"
        putExtra(Intent.EXTRA_STREAM, uri)
        addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)
        putExtra(Intent.EXTRA_EMAIL, arrayOf(toEmail))
        putExtra(Intent.EXTRA_SUBJECT, "Tinnitus $label Report")
        putExtra(Intent.EXTRA_TEXT, "Attached is the latest $label report.")
    }

    val resInfoList = context.packageManager.queryIntentActivities(intent, 0)
    for (resolveInfo in resInfoList) {
        val packageName = resolveInfo.activityInfo.packageName
        context.grantUriPermission(packageName, uri, Intent.FLAG_GRANT_READ_URI_PERMISSION)
    }

    context.startActivity(Intent.createChooser(intent, "Send report via email"))
}
